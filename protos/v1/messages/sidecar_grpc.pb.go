// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SidecarClient is the client API for Sidecar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SidecarClient interface {
	Register(ctx context.Context, in *RegistrationMsg, opts ...grpc.CallOption) (*RegistrationMsgResponse, error)
	Sub(ctx context.Context, in *SubMsg, opts ...grpc.CallOption) (*SubMsgResponse, error)
	SubJS(ctx context.Context, in *SubJSMsg, opts ...grpc.CallOption) (*SubJSMsgResponse, error)
	Recv(ctx context.Context, in *Receive, opts ...grpc.CallOption) (*SubTopicResponse, error)
	RecvJS(ctx context.Context, in *ReceiveJS, opts ...grpc.CallOption) (*SubJSTopicResponse, error)
	Unsub(ctx context.Context, in *UnsubMsg, opts ...grpc.CallOption) (*UnsubMsgResponse, error)
	UnsubJS(ctx context.Context, in *UnsubJSMsg, opts ...grpc.CallOption) (*UnsubJSMsgResponse, error)
	Pub(ctx context.Context, in *PubMsg, opts ...grpc.CallOption) (*PubMsgResponse, error)
	PubJS(ctx context.Context, in *PubJSMsg, opts ...grpc.CallOption) (*PubJSMsgResponse, error)
	Log(ctx context.Context, in *LogMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sidecarClient struct {
	cc grpc.ClientConnInterface
}

func NewSidecarClient(cc grpc.ClientConnInterface) SidecarClient {
	return &sidecarClient{cc}
}

func (c *sidecarClient) Register(ctx context.Context, in *RegistrationMsg, opts ...grpc.CallOption) (*RegistrationMsgResponse, error) {
	out := new(RegistrationMsgResponse)
	err := c.cc.Invoke(ctx, "/messages.Sidecar/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) Sub(ctx context.Context, in *SubMsg, opts ...grpc.CallOption) (*SubMsgResponse, error) {
	out := new(SubMsgResponse)
	err := c.cc.Invoke(ctx, "/messages.Sidecar/Sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) SubJS(ctx context.Context, in *SubJSMsg, opts ...grpc.CallOption) (*SubJSMsgResponse, error) {
	out := new(SubJSMsgResponse)
	err := c.cc.Invoke(ctx, "/messages.Sidecar/SubJS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) Recv(ctx context.Context, in *Receive, opts ...grpc.CallOption) (*SubTopicResponse, error) {
	out := new(SubTopicResponse)
	err := c.cc.Invoke(ctx, "/messages.Sidecar/Recv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) RecvJS(ctx context.Context, in *ReceiveJS, opts ...grpc.CallOption) (*SubJSTopicResponse, error) {
	out := new(SubJSTopicResponse)
	err := c.cc.Invoke(ctx, "/messages.Sidecar/RecvJS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) Unsub(ctx context.Context, in *UnsubMsg, opts ...grpc.CallOption) (*UnsubMsgResponse, error) {
	out := new(UnsubMsgResponse)
	err := c.cc.Invoke(ctx, "/messages.Sidecar/Unsub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) UnsubJS(ctx context.Context, in *UnsubJSMsg, opts ...grpc.CallOption) (*UnsubJSMsgResponse, error) {
	out := new(UnsubJSMsgResponse)
	err := c.cc.Invoke(ctx, "/messages.Sidecar/UnsubJS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) Pub(ctx context.Context, in *PubMsg, opts ...grpc.CallOption) (*PubMsgResponse, error) {
	out := new(PubMsgResponse)
	err := c.cc.Invoke(ctx, "/messages.Sidecar/Pub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) PubJS(ctx context.Context, in *PubJSMsg, opts ...grpc.CallOption) (*PubJSMsgResponse, error) {
	out := new(PubJSMsgResponse)
	err := c.cc.Invoke(ctx, "/messages.Sidecar/PubJS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) Log(ctx context.Context, in *LogMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/messages.Sidecar/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SidecarServer is the server API for Sidecar service.
// All implementations must embed UnimplementedSidecarServer
// for forward compatibility
type SidecarServer interface {
	Register(context.Context, *RegistrationMsg) (*RegistrationMsgResponse, error)
	Sub(context.Context, *SubMsg) (*SubMsgResponse, error)
	SubJS(context.Context, *SubJSMsg) (*SubJSMsgResponse, error)
	Recv(context.Context, *Receive) (*SubTopicResponse, error)
	RecvJS(context.Context, *ReceiveJS) (*SubJSTopicResponse, error)
	Unsub(context.Context, *UnsubMsg) (*UnsubMsgResponse, error)
	UnsubJS(context.Context, *UnsubJSMsg) (*UnsubJSMsgResponse, error)
	Pub(context.Context, *PubMsg) (*PubMsgResponse, error)
	PubJS(context.Context, *PubJSMsg) (*PubJSMsgResponse, error)
	Log(context.Context, *LogMsg) (*emptypb.Empty, error)
	mustEmbedUnimplementedSidecarServer()
}

// UnimplementedSidecarServer must be embedded to have forward compatible implementations.
type UnimplementedSidecarServer struct {
}

func (UnimplementedSidecarServer) Register(context.Context, *RegistrationMsg) (*RegistrationMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSidecarServer) Sub(context.Context, *SubMsg) (*SubMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (UnimplementedSidecarServer) SubJS(context.Context, *SubJSMsg) (*SubJSMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubJS not implemented")
}
func (UnimplementedSidecarServer) Recv(context.Context, *Receive) (*SubTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recv not implemented")
}
func (UnimplementedSidecarServer) RecvJS(context.Context, *ReceiveJS) (*SubJSTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvJS not implemented")
}
func (UnimplementedSidecarServer) Unsub(context.Context, *UnsubMsg) (*UnsubMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsub not implemented")
}
func (UnimplementedSidecarServer) UnsubJS(context.Context, *UnsubJSMsg) (*UnsubJSMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubJS not implemented")
}
func (UnimplementedSidecarServer) Pub(context.Context, *PubMsg) (*PubMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pub not implemented")
}
func (UnimplementedSidecarServer) PubJS(context.Context, *PubJSMsg) (*PubJSMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubJS not implemented")
}
func (UnimplementedSidecarServer) Log(context.Context, *LogMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedSidecarServer) mustEmbedUnimplementedSidecarServer() {}

// UnsafeSidecarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SidecarServer will
// result in compilation errors.
type UnsafeSidecarServer interface {
	mustEmbedUnimplementedSidecarServer()
}

func RegisterSidecarServer(s grpc.ServiceRegistrar, srv SidecarServer) {
	s.RegisterService(&Sidecar_ServiceDesc, srv)
}

func _Sidecar_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Sidecar/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).Register(ctx, req.(*RegistrationMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Sidecar/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).Sub(ctx, req.(*SubMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_SubJS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubJSMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).SubJS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Sidecar/SubJS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).SubJS(ctx, req.(*SubJSMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_Recv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Receive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).Recv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Sidecar/Recv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).Recv(ctx, req.(*Receive))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_RecvJS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveJS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).RecvJS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Sidecar/RecvJS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).RecvJS(ctx, req.(*ReceiveJS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_Unsub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).Unsub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Sidecar/Unsub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).Unsub(ctx, req.(*UnsubMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_UnsubJS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubJSMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).UnsubJS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Sidecar/UnsubJS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).UnsubJS(ctx, req.(*UnsubJSMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_Pub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).Pub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Sidecar/Pub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).Pub(ctx, req.(*PubMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_PubJS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubJSMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).PubJS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Sidecar/PubJS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).PubJS(ctx, req.(*PubJSMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Sidecar/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).Log(ctx, req.(*LogMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Sidecar_ServiceDesc is the grpc.ServiceDesc for Sidecar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sidecar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messages.Sidecar",
	HandlerType: (*SidecarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Sidecar_Register_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _Sidecar_Sub_Handler,
		},
		{
			MethodName: "SubJS",
			Handler:    _Sidecar_SubJS_Handler,
		},
		{
			MethodName: "Recv",
			Handler:    _Sidecar_Recv_Handler,
		},
		{
			MethodName: "RecvJS",
			Handler:    _Sidecar_RecvJS_Handler,
		},
		{
			MethodName: "Unsub",
			Handler:    _Sidecar_Unsub_Handler,
		},
		{
			MethodName: "UnsubJS",
			Handler:    _Sidecar_UnsubJS_Handler,
		},
		{
			MethodName: "Pub",
			Handler:    _Sidecar_Pub_Handler,
		},
		{
			MethodName: "PubJS",
			Handler:    _Sidecar_PubJS_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _Sidecar_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/v1/messages/sidecar.proto",
}
